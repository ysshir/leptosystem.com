AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Prefix:
    Type: String

  Environment:
    Description: デプロイ環境
    Type: String
    AllowedValues:
      - production
      - staging
    Default: staging

#Mappings:
#  Environments:
#    production:
#    staging:

Resources:
  # ------------------------------------------------------------
  HttpOkayLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HttpOkay
      Handler: index.handler

      Runtime: nodejs18.x
      Architectures:
        - arm64

      Code:
        ZipFile: |
          exports.handler = async () => ({statusCode: 200});

      MemorySize: 128

#      ReservedConcurrentExecutions: 10
      Timeout: 3

      Role: !GetAtt IAMHttpOkayLambdaRole.Arn

  IAMHttpOkayLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: http-okay-lambda-role

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      MaxSessionDuration: 3600

  # ------------------------------------------------------------
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${Prefix}-www-api
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowOrigins:
          - http://localhost:3000
          - !Sub
            - https://${domain}
            - domain:
                Fn::ImportValue: !Sub ${Prefix}-PublicDomainName

        AllowHeaders:
          - "*"
        ExposeHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - OPTIONS
          - PATCH
          - PUT
          - DELETE
          - HEAD
        MaxAge: 300

  ApiLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api-gateway/${Prefix}/www
      RetentionInDays: 7

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLog.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency, "responseLength":$context.responseLength, "integrationError":$context.integration.error}'


  ApiOkayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: OPTIONS /{proxy+}

      # 統合
      Target: !Sub integrations/${ApiOkayIntegration}

  ApiOkayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt HttpOkayLambda.Arn
      PayloadFormatVersion: '2.0'

  ApiOkayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HttpOkayLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*

# ------------------------------------------------------------
Outputs:
  ApiGatewayId:
    Value: !Ref ApiGateway
    Export:
      Name: !Sub ${Prefix}-www-ApiGatewayId

  ApiGatewayArn:
    Value: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}
    Export:
      Name: !Sub ${Prefix}-www-ApiGatewayArn

  ApiEndpoint:
    Value: !GetAtt ApiGateway.ApiEndpoint
    Export:
      Name: !Sub ${Prefix}-www-ApiEndpoint

